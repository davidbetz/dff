#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Squid.Data.Context
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="Squid")]
	public partial class SquidLINQDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertFeedCreation(Squid.Data.Entity.FeedCreation instance);
    partial void UpdateFeedCreation(Squid.Data.Entity.FeedCreation instance);
    partial void DeleteFeedCreation(Squid.Data.Entity.FeedCreation instance);
    partial void InsertSnippetGroup(Squid.Data.Entity.SnippetGroup instance);
    partial void UpdateSnippetGroup(Squid.Data.Entity.SnippetGroup instance);
    partial void DeleteSnippetGroup(Squid.Data.Entity.SnippetGroup instance);
    partial void InsertSnippet(Squid.Data.Entity.Snippet instance);
    partial void UpdateSnippet(Squid.Data.Entity.Snippet instance);
    partial void DeleteSnippet(Squid.Data.Entity.Snippet instance);
    #endregion
		
		public SquidLINQDataContext() : 
				base(global::Squid.Properties.Settings.Default.SquidConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SquidLINQDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SquidLINQDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SquidLINQDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SquidLINQDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Squid.Data.Entity.FeedCreation> FeedCreations
		{
			get
			{
				return this.GetTable<Squid.Data.Entity.FeedCreation>();
			}
		}
		
		public System.Data.Linq.Table<Squid.Data.Entity.SnippetGroup> SnippetGroups
		{
			get
			{
				return this.GetTable<Squid.Data.Entity.SnippetGroup>();
			}
		}
		
		public System.Data.Linq.Table<Squid.Data.Entity.Snippet> Snippets
		{
			get
			{
				return this.GetTable<Squid.Data.Entity.Snippet>();
			}
		}
	}
}
namespace Squid.Data.Entity
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.ComponentModel;
	using System;
	
	
	[Table(Name="dbo.FeedCreation")]
	public partial class FeedCreation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FeedCreationId;
		
		private string _FeedCreationTitle;
		
		private string _FeedCreationDescription;
		
		private string _FeedCreationStatement;
		
		private string _FeedCreationDatabase;
		
		private string _FeedGuid;
		
		private bool _FeedAccessViaGuidOnly;
		
		private System.DateTime _FeedCreationModifiedDate;
		
		private System.DateTime _FeedCreationCreationDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFeedCreationIdChanging(int value);
    partial void OnFeedCreationIdChanged();
    partial void OnFeedCreationTitleChanging(string value);
    partial void OnFeedCreationTitleChanged();
    partial void OnFeedCreationDescriptionChanging(string value);
    partial void OnFeedCreationDescriptionChanged();
    partial void OnFeedCreationStatementChanging(string value);
    partial void OnFeedCreationStatementChanged();
    partial void OnFeedCreationDatabaseChanging(string value);
    partial void OnFeedCreationDatabaseChanged();
    partial void OnFeedGuidChanging(string value);
    partial void OnFeedGuidChanged();
    partial void OnFeedAccessViaGuidOnlyChanging(bool value);
    partial void OnFeedAccessViaGuidOnlyChanged();
    partial void OnFeedCreationModifiedDateChanging(System.DateTime value);
    partial void OnFeedCreationModifiedDateChanged();
    partial void OnFeedCreationCreationDateChanging(System.DateTime value);
    partial void OnFeedCreationCreationDateChanged();
    #endregion
		
		public FeedCreation()
		{
			OnCreated();
		}
		
		[Column(Storage="_FeedCreationId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FeedCreationId
		{
			get
			{
				return this._FeedCreationId;
			}
			set
			{
				if ((this._FeedCreationId != value))
				{
					this.OnFeedCreationIdChanging(value);
					this.SendPropertyChanging();
					this._FeedCreationId = value;
					this.SendPropertyChanged("FeedCreationId");
					this.OnFeedCreationIdChanged();
				}
			}
		}
		
		[Column(Storage="_FeedCreationTitle", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string FeedCreationTitle
		{
			get
			{
				return this._FeedCreationTitle;
			}
			set
			{
				if ((this._FeedCreationTitle != value))
				{
					this.OnFeedCreationTitleChanging(value);
					this.SendPropertyChanging();
					this._FeedCreationTitle = value;
					this.SendPropertyChanged("FeedCreationTitle");
					this.OnFeedCreationTitleChanged();
				}
			}
		}
		
		[Column(Storage="_FeedCreationDescription", DbType="VarChar(2000) NOT NULL", CanBeNull=false)]
		public string FeedCreationDescription
		{
			get
			{
				return this._FeedCreationDescription;
			}
			set
			{
				if ((this._FeedCreationDescription != value))
				{
					this.OnFeedCreationDescriptionChanging(value);
					this.SendPropertyChanging();
					this._FeedCreationDescription = value;
					this.SendPropertyChanged("FeedCreationDescription");
					this.OnFeedCreationDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_FeedCreationStatement", DbType="VarChar(4000) NOT NULL", CanBeNull=false)]
		public string FeedCreationStatement
		{
			get
			{
				return this._FeedCreationStatement;
			}
			set
			{
				if ((this._FeedCreationStatement != value))
				{
					this.OnFeedCreationStatementChanging(value);
					this.SendPropertyChanging();
					this._FeedCreationStatement = value;
					this.SendPropertyChanged("FeedCreationStatement");
					this.OnFeedCreationStatementChanged();
				}
			}
		}
		
		[Column(Storage="_FeedCreationDatabase", DbType="VarChar(200)")]
		public string FeedCreationDatabase
		{
			get
			{
				return this._FeedCreationDatabase;
			}
			set
			{
				if ((this._FeedCreationDatabase != value))
				{
					this.OnFeedCreationDatabaseChanging(value);
					this.SendPropertyChanging();
					this._FeedCreationDatabase = value;
					this.SendPropertyChanged("FeedCreationDatabase");
					this.OnFeedCreationDatabaseChanged();
				}
			}
		}
		
		[Column(Storage="_FeedGuid", DbType="Char(36) NOT NULL", CanBeNull=false)]
		public string FeedGuid
		{
			get
			{
				return this._FeedGuid;
			}
			set
			{
				if ((this._FeedGuid != value))
				{
					this.OnFeedGuidChanging(value);
					this.SendPropertyChanging();
					this._FeedGuid = value;
					this.SendPropertyChanged("FeedGuid");
					this.OnFeedGuidChanged();
				}
			}
		}
		
		[Column(Storage="_FeedAccessViaGuidOnly", DbType="Bit NOT NULL")]
		public bool FeedAccessViaGuidOnly
		{
			get
			{
				return this._FeedAccessViaGuidOnly;
			}
			set
			{
				if ((this._FeedAccessViaGuidOnly != value))
				{
					this.OnFeedAccessViaGuidOnlyChanging(value);
					this.SendPropertyChanging();
					this._FeedAccessViaGuidOnly = value;
					this.SendPropertyChanged("FeedAccessViaGuidOnly");
					this.OnFeedAccessViaGuidOnlyChanged();
				}
			}
		}
		
		[Column(Storage="_FeedCreationModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime FeedCreationModifiedDate
		{
			get
			{
				return this._FeedCreationModifiedDate;
			}
			set
			{
				if ((this._FeedCreationModifiedDate != value))
				{
					this.OnFeedCreationModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._FeedCreationModifiedDate = value;
					this.SendPropertyChanged("FeedCreationModifiedDate");
					this.OnFeedCreationModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_FeedCreationCreationDate", DbType="DateTime NOT NULL")]
		public System.DateTime FeedCreationCreationDate
		{
			get
			{
				return this._FeedCreationCreationDate;
			}
			set
			{
				if ((this._FeedCreationCreationDate != value))
				{
					this.OnFeedCreationCreationDateChanging(value);
					this.SendPropertyChanging();
					this._FeedCreationCreationDate = value;
					this.SendPropertyChanged("FeedCreationCreationDate");
					this.OnFeedCreationCreationDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.SnippetGroup")]
	public partial class SnippetGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SnippetGroupId;
		
		private string _SnippetGroupTitle;
		
		private System.DateTime _SnippetGroupModifiedDate;
		
		private System.DateTime _SnippetGroupCreationDate;
		
		private EntitySet<Snippet> _Snippets;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSnippetGroupIdChanging(int value);
    partial void OnSnippetGroupIdChanged();
    partial void OnSnippetGroupTitleChanging(string value);
    partial void OnSnippetGroupTitleChanged();
    partial void OnSnippetGroupModifiedDateChanging(System.DateTime value);
    partial void OnSnippetGroupModifiedDateChanged();
    partial void OnSnippetGroupCreationDateChanging(System.DateTime value);
    partial void OnSnippetGroupCreationDateChanged();
    #endregion
		
		public SnippetGroup()
		{
			this._Snippets = new EntitySet<Snippet>(new Action<Snippet>(this.attach_Snippets), new Action<Snippet>(this.detach_Snippets));
			OnCreated();
		}
		
		[Column(Storage="_SnippetGroupId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SnippetGroupId
		{
			get
			{
				return this._SnippetGroupId;
			}
			set
			{
				if ((this._SnippetGroupId != value))
				{
					this.OnSnippetGroupIdChanging(value);
					this.SendPropertyChanging();
					this._SnippetGroupId = value;
					this.SendPropertyChanged("SnippetGroupId");
					this.OnSnippetGroupIdChanged();
				}
			}
		}
		
		[Column(Storage="_SnippetGroupTitle", DbType="VarChar(400) NOT NULL", CanBeNull=false)]
		public string SnippetGroupTitle
		{
			get
			{
				return this._SnippetGroupTitle;
			}
			set
			{
				if ((this._SnippetGroupTitle != value))
				{
					this.OnSnippetGroupTitleChanging(value);
					this.SendPropertyChanging();
					this._SnippetGroupTitle = value;
					this.SendPropertyChanged("SnippetGroupTitle");
					this.OnSnippetGroupTitleChanged();
				}
			}
		}
		
		[Column(Storage="_SnippetGroupModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime SnippetGroupModifiedDate
		{
			get
			{
				return this._SnippetGroupModifiedDate;
			}
			set
			{
				if ((this._SnippetGroupModifiedDate != value))
				{
					this.OnSnippetGroupModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._SnippetGroupModifiedDate = value;
					this.SendPropertyChanged("SnippetGroupModifiedDate");
					this.OnSnippetGroupModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_SnippetGroupCreationDate", DbType="DateTime NOT NULL")]
		public System.DateTime SnippetGroupCreationDate
		{
			get
			{
				return this._SnippetGroupCreationDate;
			}
			set
			{
				if ((this._SnippetGroupCreationDate != value))
				{
					this.OnSnippetGroupCreationDateChanging(value);
					this.SendPropertyChanging();
					this._SnippetGroupCreationDate = value;
					this.SendPropertyChanged("SnippetGroupCreationDate");
					this.OnSnippetGroupCreationDateChanged();
				}
			}
		}
		
		[Association(Name="SnippetGroup_Snippet", Storage="_Snippets", OtherKey="SnippetGroupId")]
		public EntitySet<Snippet> Snippets
		{
			get
			{
				return this._Snippets;
			}
			set
			{
				this._Snippets.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Snippets(Snippet entity)
		{
			this.SendPropertyChanging();
			entity.SnippetGroup = this;
		}
		
		private void detach_Snippets(Snippet entity)
		{
			this.SendPropertyChanging();
			entity.SnippetGroup = null;
		}
	}
	
	[Table(Name="dbo.Snippet")]
	public partial class Snippet : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SnippetId;
		
		private System.Nullable<int> _SnippetGroupId;
		
		private string _SnippetTitle;
		
		private string _SnippetDescription;
		
		private string _SnippetExtra;
		
		private int _SnippetOrder;
		
		private System.Nullable<System.DateTime> _SnippetValidBegin;
		
		private System.Nullable<System.DateTime> _SnippetValidEnd;
		
		private System.DateTime _SnippetModifiedDate;
		
		private System.DateTime _SnippetCreationDate;
		
		private EntityRef<SnippetGroup> _SnippetGroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSnippetIdChanging(int value);
    partial void OnSnippetIdChanged();
    partial void OnSnippetGroupIdChanging(System.Nullable<int> value);
    partial void OnSnippetGroupIdChanged();
    partial void OnSnippetTitleChanging(string value);
    partial void OnSnippetTitleChanged();
    partial void OnSnippetDescriptionChanging(string value);
    partial void OnSnippetDescriptionChanged();
    partial void OnSnippetExtraChanging(string value);
    partial void OnSnippetExtraChanged();
    partial void OnSnippetOrderChanging(int value);
    partial void OnSnippetOrderChanged();
    partial void OnSnippetValidBeginChanging(System.Nullable<System.DateTime> value);
    partial void OnSnippetValidBeginChanged();
    partial void OnSnippetValidEndChanging(System.Nullable<System.DateTime> value);
    partial void OnSnippetValidEndChanged();
    partial void OnSnippetModifiedDateChanging(System.DateTime value);
    partial void OnSnippetModifiedDateChanged();
    partial void OnSnippetCreationDateChanging(System.DateTime value);
    partial void OnSnippetCreationDateChanged();
    #endregion
		
		public Snippet()
		{
			this._SnippetGroup = default(EntityRef<SnippetGroup>);
			OnCreated();
		}
		
		[Column(Storage="_SnippetId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SnippetId
		{
			get
			{
				return this._SnippetId;
			}
			set
			{
				if ((this._SnippetId != value))
				{
					this.OnSnippetIdChanging(value);
					this.SendPropertyChanging();
					this._SnippetId = value;
					this.SendPropertyChanged("SnippetId");
					this.OnSnippetIdChanged();
				}
			}
		}
		
		[Column(Storage="_SnippetGroupId", DbType="Int")]
		public System.Nullable<int> SnippetGroupId
		{
			get
			{
				return this._SnippetGroupId;
			}
			set
			{
				if ((this._SnippetGroupId != value))
				{
					if (this._SnippetGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSnippetGroupIdChanging(value);
					this.SendPropertyChanging();
					this._SnippetGroupId = value;
					this.SendPropertyChanged("SnippetGroupId");
					this.OnSnippetGroupIdChanged();
				}
			}
		}
		
		[Column(Storage="_SnippetTitle", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string SnippetTitle
		{
			get
			{
				return this._SnippetTitle;
			}
			set
			{
				if ((this._SnippetTitle != value))
				{
					this.OnSnippetTitleChanging(value);
					this.SendPropertyChanging();
					this._SnippetTitle = value;
					this.SendPropertyChanged("SnippetTitle");
					this.OnSnippetTitleChanged();
				}
			}
		}
		
		[Column(Storage="_SnippetDescription", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string SnippetDescription
		{
			get
			{
				return this._SnippetDescription;
			}
			set
			{
				if ((this._SnippetDescription != value))
				{
					this.OnSnippetDescriptionChanging(value);
					this.SendPropertyChanging();
					this._SnippetDescription = value;
					this.SendPropertyChanged("SnippetDescription");
					this.OnSnippetDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_SnippetExtra", DbType="VarChar(200)")]
		public string SnippetExtra
		{
			get
			{
				return this._SnippetExtra;
			}
			set
			{
				if ((this._SnippetExtra != value))
				{
					this.OnSnippetExtraChanging(value);
					this.SendPropertyChanging();
					this._SnippetExtra = value;
					this.SendPropertyChanged("SnippetExtra");
					this.OnSnippetExtraChanged();
				}
			}
		}
		
		[Column(Storage="_SnippetOrder", DbType="Int NOT NULL")]
		public int SnippetOrder
		{
			get
			{
				return this._SnippetOrder;
			}
			set
			{
				if ((this._SnippetOrder != value))
				{
					this.OnSnippetOrderChanging(value);
					this.SendPropertyChanging();
					this._SnippetOrder = value;
					this.SendPropertyChanged("SnippetOrder");
					this.OnSnippetOrderChanged();
				}
			}
		}
		
		[Column(Storage="_SnippetValidBegin", DbType="DateTime")]
		public System.Nullable<System.DateTime> SnippetValidBegin
		{
			get
			{
				return this._SnippetValidBegin;
			}
			set
			{
				if ((this._SnippetValidBegin != value))
				{
					this.OnSnippetValidBeginChanging(value);
					this.SendPropertyChanging();
					this._SnippetValidBegin = value;
					this.SendPropertyChanged("SnippetValidBegin");
					this.OnSnippetValidBeginChanged();
				}
			}
		}
		
		[Column(Storage="_SnippetValidEnd", DbType="DateTime")]
		public System.Nullable<System.DateTime> SnippetValidEnd
		{
			get
			{
				return this._SnippetValidEnd;
			}
			set
			{
				if ((this._SnippetValidEnd != value))
				{
					this.OnSnippetValidEndChanging(value);
					this.SendPropertyChanging();
					this._SnippetValidEnd = value;
					this.SendPropertyChanged("SnippetValidEnd");
					this.OnSnippetValidEndChanged();
				}
			}
		}
		
		[Column(Storage="_SnippetModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime SnippetModifiedDate
		{
			get
			{
				return this._SnippetModifiedDate;
			}
			set
			{
				if ((this._SnippetModifiedDate != value))
				{
					this.OnSnippetModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._SnippetModifiedDate = value;
					this.SendPropertyChanged("SnippetModifiedDate");
					this.OnSnippetModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_SnippetCreationDate", DbType="DateTime NOT NULL")]
		public System.DateTime SnippetCreationDate
		{
			get
			{
				return this._SnippetCreationDate;
			}
			set
			{
				if ((this._SnippetCreationDate != value))
				{
					this.OnSnippetCreationDateChanging(value);
					this.SendPropertyChanging();
					this._SnippetCreationDate = value;
					this.SendPropertyChanged("SnippetCreationDate");
					this.OnSnippetCreationDateChanged();
				}
			}
		}
		
		[Association(Name="SnippetGroup_Snippet", Storage="_SnippetGroup", ThisKey="SnippetGroupId", IsForeignKey=true)]
		public SnippetGroup SnippetGroup
		{
			get
			{
				return this._SnippetGroup.Entity;
			}
			set
			{
				SnippetGroup previousValue = this._SnippetGroup.Entity;
				if (((previousValue != value) 
							|| (this._SnippetGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SnippetGroup.Entity = null;
						previousValue.Snippets.Remove(this);
					}
					this._SnippetGroup.Entity = value;
					if ((value != null))
					{
						value.Snippets.Add(this);
						this._SnippetGroupId = value.SnippetGroupId;
					}
					else
					{
						this._SnippetGroupId = default(Nullable<int>);
					}
					this.SendPropertyChanged("SnippetGroup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
